#include <stdio.h>
#include<conio.h>
#include<time.h>
int rand_arr[10][2];
int cell[10][10] = {0};
int rec[50][2];
char duplicate[10][10];
void datasheet()
{
    int i = 0,j = 0,rand1,rand2;
    while(j < 8)
    {
        rand1 = rand() % 9;
        rand2 = rand() % 9;
        //printf("%d %d\n",rand1,rand2);
        if(cell[rand1][rand2] == 0)
        {
            cell[rand1][rand2] = -1;
            rand_arr[j][0] = rand1;
            rand_arr[j][1] = rand2;
            j++;
        }
        else
        {
            while(++rand2<10 && cell[rand1][rand2] == -1);
            if(rand2<10)
            {
                cell[rand1][rand2] = -1;
                rand_arr[j][0] = rand1;
                rand_arr[j][1] = rand2;
                j++;
            }
            else
            {
                continue;
            }
        }
        int r[]={-1,-1,-1,0,0,1,1,1};
        int c[]={-1,0,1,-1,1,-1,0,1};
        for(int k=0;k<8;k++)
        {
            if(cell[rand1+r[k]][rand2+c[k]]!=-1)
            {
                cell[rand1+r[k]][rand2+c[k]]++;
            }
        }
        // if(cell[rand1-1][rand2]!=-1 && rand1>=0 &&rand1<10 && rand2>=0 && rand2<10)
        // {
        //     cell[rand1-1][rand2]++;
        // }
        // if(cell[rand1-1][rand2-1]!=-1 && rand1>=0 &&rand1<10 && rand2>=0 && rand2<10)
        // {
        //     cell[rand1-1][rand2-1]++;
        // }
        // if(cell[rand1-1][rand2+1]!=-1 && rand1>=0 &&rand1<10 && rand2>=0 && rand2<10)
        // {
        //     cell[rand1-1][rand2+1]++;
        // }
        // if(cell[rand1][rand2+1]!=-1 && rand1>=0 &&rand1<10 && rand2>=0 && rand2<10)
        // {
        //     cell[rand1][rand2+1]++;
        // }
        // if(cell[rand1][rand2-1]!=-1 && rand1>=0 &&rand1<10 && rand2>=0 && rand2<10)
        // {
        //     cell[rand1][rand2-1]++;
        // }
        // if(cell[rand1+1][rand2-1]!=-1 && rand1>=0 &&rand1<10 && rand2>=0 && rand2<10)
        // {
        //     cell[rand1+1][rand2-1]++;
        // }
        // if(cell[rand1+1][rand2]!=-1 && rand1>=0 &&rand1<10 && rand2>=0 && rand2<10)
        // {
        //     cell[rand1+1][rand2]++;
        // }
        // if(cell[rand1+1][rand2+1]!=-1 && rand1>=0 &&rand1<10 && rand2>=0 && rand2<10)
        // {
        //     cell[rand1+1][rand2+1]++;
        // }
    }
    for(i=0;i<10;i++)
    {
        for(j=0;j<10;j++)
        {
            printf("    %2d    |", cell[i][j]);
        }
        
        printf("\n");
        printf("    ----------------------------------------------------------------------------------------------------------\n");
    }
    for(i=0;i<10;i++)
    {
        for(j=0;j<10;j++)
        {
            duplicate[i][j] = '-';
        }
    }
}
void print()
{
    int i,j;
    for(i=0;i<10;i++)
    {
        for(j=0;j<10;j++)
        {
            if(cell[i][j]==-1 && duplicate[i][j]=='F')
            {
                printf("    %c    |",duplicate[i][j]);
            }
            else if(cell[i][j]!=-1 && duplicate[i][j]=='F')
            {
                printf("    W    |");
            }
            else
            {
                printf("    %d    |",cell[i][j]);
            }
        }
        printf("\n    ----------------------------------------------------------------------------------------------------------\n");
    }
}

int recursion(int len, int ro, int co)
{
    int i,j;
    for(i=0;i<len;i++)
    {
        if(rec[i][0]==ro && rec[i][1]==co)
        {
            return 0;
        }
    }
    rec[len][0]=ro;
    rec[len][1]=co;
    len++;
    duplicate[ro][co]=cell[ro][co]+48;
    if(ro-1>=0 && co-1>=0 && cell[ro-1][co-1]!=0)
    {
        duplicate[ro-1][co-1]=cell[ro-1][co-1]+48;
    }
    else if(ro-1>=0 && co-1>=0)
    {
        recursion(len,ro-1,co-1);
    }
    if(ro-1>=0 && co>=0 && cell[ro-1][co]!=0)
    {
        duplicate[ro-1][co]=cell[ro-1][co]+48;
    }
    else if(ro-1>=0 && co>=0)
    {
        recursion(len,ro-1,co);
    }
    if(ro-1>=0 && co+1<10 && cell[ro-1][co+1]!=0)
    {
        duplicate[ro-1][co+1]=cell[ro-1][co+1]+48;
    }
    else if(ro-1>=0 && co+1<10)
    {
        recursion(len,ro-1,co+1);
    }
    if(ro>=0 && co-1>=0 && cell[ro][co-1]!=0)
    {
        duplicate[ro][co-1]=cell[ro][co-1]+48;
    }
    else if(ro>=0 && co-1>=0)
    {
        recursion(len,ro,co-1);
    }
    if(ro>=0 && co+1<10 && cell[ro][co+1]!=0)
    {
        duplicate[ro][co+1]=cell[ro][co+1]+48;
    }
    else if(ro>=0 && co+1<10)
    {
        recursion(len,ro,co+1);
    }
    if(ro+1<10 && co-1>=0 && cell[ro+1][co-1]!=0)
    {
        duplicate[ro+1][co-1]=cell[ro+1][co-1]+48;
    }
    else if(ro+1<10 && co-1>=0)
    {
        recursion(len,ro+1,co-1);
    }
    if(ro+1<10 && co>=0 && cell[ro+1][co]!=0)
    {
        duplicate[ro+1][co]=cell[ro+1][co]+48;
    }
    else if(ro+1<10 && co>=0)
    {
        recursion(len,ro+1,co);
    }
    if(ro+1<10 && co+1<10 && cell[ro+1][co+1]!=0)
    {
        duplicate[ro+1][co+1]=cell[ro+1][co+1]+48;
    }
    else if(ro+1<10 && co+1<10)
    {
        recursion(len,ro+1,co+1);
    }
    return 0;
}
int game()
{
    int i,j,row,col,num=0,flag=0;
    int choice;
    while(num<8)
    {
        printf("The found out arrangement is\n");
        for(i=0;i<10;i++)
        {
            for(j=0;j<10;j++)
            {
                printf("    %c    |",duplicate[i][j]);
            }
            printf("\n");
        }
        printf("Do want to fix flag (1) or identify the count (2) :");
        scanf("%d",&choice);
        printf("Enter position :");
        scanf("%d %d",&row,&col);
        if(choice==1)
        {
            if(duplicate[row][col]=='-' && flag<8)
            {
                duplicate[row][col]='F';
                flag++;
                if(cell[row][col]==-1)
                {
                    num++;
                }
            }
            else if(duplicate[row][col]=='F')
            {
                duplicate[row][col]='-';
                flag--;
                if(cell[row][col]==-1)
                {
                    num--;
                }
            }
            else if(flag==8)
            {
                printf("you have fixed maximum number of flags\n");
            }
            else
            {
                printf("You have entered the already identified position/n");
            }
        }
        else if(choice==2)
        {
            if(cell[row][col]==-1)
            {
                //print with wrong mark
                printf("You failed\n");
                print();
                return 0;
            }
            else if(cell[row][col]>0 )
            {
                duplicate[row][col]=cell[row][col]+48;
            }
            else if(cell[row][col]==0)
            {
                recursion(0,row,col);
            }
        }
    }
     printf("You won\n");
    print();
    return 0;
}
int main()
{
    srand(time(NULL));
    datasheet();
    game();
}
